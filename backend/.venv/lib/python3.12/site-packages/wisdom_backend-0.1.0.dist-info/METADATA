Metadata-Version: 2.4
Name: wisdom-backend
Version: 0.1.0
Summary: Local FastAPI backend for Wisdom app (no Supabase dependencies)
Author: Wisdom Team
Author-email: dev@wisdom.local
Requires-Python: >=3.11,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3.14
Requires-Dist: fastapi (>=0.115.0,<0.116.0)
Requires-Dist: passlib[bcrypt] (>=1.7.4,<2.0.0)
Requires-Dist: psycopg[pool] (>=3.2.1,<4.0.0)
Requires-Dist: pydantic-settings (>=2.4.0,<3.0.0)
Requires-Dist: python-dotenv (>=1.0.1,<2.0.0)
Requires-Dist: python-jose[cryptography] (>=3.3.0,<4.0.0)
Requires-Dist: stripe (>=5.0.0,<6.0.0)
Requires-Dist: uvicorn[standard] (>=0.30.0,<0.31.0)
Description-Content-Type: text/markdown

# Wisdom Local Backend

FastAPI-baserad backend som ersätter Supabase för den lokala utvecklingsmiljön. Den pratar direkt med Postgres-instansen i `~/wisdom_db` och exponerar REST-endpoints för auth, profiler och kurser.

## Struktur
```
backend/
├── app/
│   ├── config.py        # Laddar miljövariabler och appinställningar
│   ├── db.py            # Psycopg connection pool och hjälpfunktioner
│   ├── auth.py          # Hashning, JWT-hantering och Depends-helpers
│   ├── models.py        # SQL-frågor (enkel Query-layer utan ORM)
│   ├── schemas.py       # Pydantic-modeller
│   ├── routes/
│   │   ├── auth.py      # /auth/register, /auth/login
│   │   ├── profiles.py  # /profiles/me
│   │   └── courses.py   # /courses, /courses/{id}
│   └── main.py          # FastAPI-app, inkluderar routers
├── pyproject.toml
└── README.md
```

## Kom igång
1. Skapa virtuell miljö (Poetry eller `python -m venv`).
2. Installera beroenden: `poetry install` eller `pip install -r requirements.txt` (kan genereras via `poetry export`).
3. Kopiera `.env.example` till `.env` och sätt:
   ```env
   DATABASE_URL=postgresql://oden:1124vattnaRn@localhost:5432/wisdom
   JWT_SECRET=change-me
   JWT_EXPIRES_MINUTES=60
   # Stripe (valfritt men krävs för betalningsflödet)
   STRIPE_SECRET_KEY=sk_test_xxx
   STRIPE_WEBHOOK_SECRET=whsec_xxx
   ```
4. Starta servern:
   ```bash
   poetry run uvicorn app.main:app --reload
   ```
5. Swagger finns på `http://localhost:8000/docs`.

## Autentisering
- Passwords lagras i `auth.users.encrypted_password` (bcrypt via `pgcrypto`).
- `POST /auth/login` returnerar access token (JWT, HS256).
- Skyddade endpoints använder `Authorization: Bearer <token>`.

## Tests
Kör `poetry run pytest` (exempeltests kan läggas i `backend/tests/`).

## Vidare arbete
- Lägg till fler endpoints (bookings, meddelanden, mm) enligt behov.
- Lägg till rollkontroller (admin/teacher) innan skrivoperationer.
- Integrera med Flutter genom att ersätta `SupabaseClient`-anrop med HTTP mot denna backend.


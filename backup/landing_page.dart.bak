import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

import '../../data/providers.dart';
import '../../ui/gradient_text.dart';
import '../../core/widgets/glass_card.dart';

class LandingPage extends ConsumerStatefulWidget {
  const LandingPage({super.key});

  @override
  ConsumerState<LandingPage> createState() => _LandingPageState();
}

class _LandingPageState extends ConsumerState<LandingPage> {
  final _scrollController = ScrollController();
  final _coursesKey = GlobalKey();
  final _teachersKey = GlobalKey();
  final _servicesKey = GlobalKey();

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  void _scrollTo(GlobalKey key) {
    final ctx = key.currentContext;
    if (ctx != null) {
      Scrollable.ensureVisible(ctx, 
        duration: const Duration(milliseconds: 450), 
        curve: Curves.easeOutCubic
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final isTablet = size.width >= 700 && size.width < 1000;
    final isDesktop = size.width >= 1000;
    final titleSize = isDesktop ? 58.0 : (isTablet ? 42.0 : 32.0);

    return Scaffold(
      body: Stack(
        children: [
          // Background image with gradient overlay
          Positioned.fill(
            child: Stack(
              children: [
                Image.asset('assets/images/bakgrund.png', fit: BoxFit.cover),
                Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.white.withOpacity(0.25),
                  Colors.white.withOpacity(0.05),
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildLoginButton() {
    return Positioned(
      top: 8,
      right: 16,
      child: GlassCard(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        child: TextButton.icon(
          onPressed: () => context.push('/auth'),
          icon: const Icon(Icons.login, size: 18, color: Colors.black54),
          label: const Text('Logga in'),
          style: TextButton.styleFrom(
            foregroundColor: const Color(0xFF0B1526),
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final isTablet = size.width >= 700 && size.width < 1000;
    final isDesktop = size.width >= 1000;
    final titleSize = isDesktop ? 58.0 : (isTablet ? 42.0 : 32.0);

    return Scaffold(
      body: Stack(
        children: [
          _buildBackground(),
          SafeArea(
            child: Stack(
              children: [
                _buildLoginButton(),
                SingleChildScrollView(
                  controller: _scrollController,
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: const BoxConstraints(maxWidth: 1200),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
    
    return Scaffold(
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset('assets/images/bakgrund.png', fit: BoxFit.cover),
          ),
          Positioned.fill(
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    Colors.white.withOpacity(0.25),
                    Colors.white.withOpacity(0.05),
                  ],
                ),
              ),
            ),
          ),
          SafeArea(
            child: SingleChildScrollView(
              controller: _scrollController,
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
              child: Center(
                child: ConstrainedBox(
                  constraints: const BoxConstraints(maxWidth: 1200),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [

    return Scaffold(
      body: Stack(
        children: [
          // Background image (under everything)
          Positioned.fill(
            child: Image.asset('assets/images/bakgrund.png', fit: BoxFit.cover),
          ),
          // Soft overlay gradient
          Positioned.fill(
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    Colors.white.withOpacity(0.25),
                    Colors.white.withOpacity(0.05),
                  ],
                ),
              ),
            ),
          ),
          SafeArea(
            child: Stack(
              children: [
                // Login button at the top
                Positioned(
                  top: 8,
                  right: 16,
                  child: GlassCard(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                    child: TextButton.icon(
                      onPressed: () => context.push('/auth'),
                      icon: const Icon(Icons.login, size: 18, color: Colors.black54),
                      label: const Text('Logga in'),
                      style: TextButton.styleFrom(
                        foregroundColor: const Color(0xFF0B1526),
                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                      ),
                    ),
                  ),
                ),
                // Main scrollable content
                SingleChildScrollView(
              children: [
                Stack(
                  children: [
                    // Top-right login button
                    Positioned(
                      top: 8,
                      right: 16,
                      child: GlassCard(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        child: TextButton.icon(
                          onPressed: () => context.push('/auth'),
                          icon: const Icon(Icons.login, size: 18, color: Colors.black54),
                          label: const Text('Logga in'),
                          style: TextButton.styleFrom(
                            foregroundColor: const Color(0xFF0B1526),
                            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          ),
                        ),
                      ),
                    ),
                    SingleChildScrollView(
                  controller: _scrollController,
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: const BoxConstraints(maxWidth: 1200),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          // HERO
                          Padding(
                            padding: const EdgeInsets.symmetric(vertical: 24),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                            // Badge / tagline
                            GlassCard(
                              padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 8),
                              child: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: const [
                                  Icon(Icons.auto_awesome, color: Colors.black54, size: 18),
                                  SizedBox(width: 8),
                                  Text('Kurser, tjänster och lärare – i ett ljust, välkomnande flöde.',
                                      style: TextStyle(color: Colors.black87)),
                                ],
                              ),
                            ),
                            const SizedBox(height: 18),
                            // Rich gradient title
                            RichText(
                              textAlign: TextAlign.center,
                              text: TextSpan(
                                style: TextStyle(
                                  color: const Color(0xFF0B1526),
                                  fontSize: titleSize,
                                  fontWeight: FontWeight.w800,
                                  height: 1.15,
                                ),
                                children: [
                                  const TextSpan(text: 'Upptäck din '),
                                  GradientTextSpan(
                                    text: 'andliga resa',
                                    gradient: const LinearGradient(
                                      begin: Alignment.topLeft,
                                      end: Alignment.bottomRight,
                                      colors: [Color(0xFF22C55E), Color(0xFFA855F7)],
                                    ),
                                    // Gör själva frasen något större än basstorlek
                                    style: TextStyle(
                                      fontSize: titleSize * 1.12,
                                      fontWeight: FontWeight.w900,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            const SizedBox(height: 12),
                            ConstrainedBox(
                              constraints: const BoxConstraints(maxWidth: 720),
                              child: const Text(
                                'På Visdom kan du hitta inspirerande kurser, möta lärare och ta del av tjänster som guidar dig framåt – i ditt tempo.',
                                textAlign: TextAlign.center,
                                style: TextStyle(color: Colors.black87, fontSize: 16),
                              ),
                            ),
                            const SizedBox(height: 18),
                            Wrap(
                              spacing: 12,
                              runSpacing: 12,
                              alignment: WrapAlignment.center,
                              children: [
                                FilledButton(
                                  style: FilledButton.styleFrom(
                                    backgroundColor: const Color(0xFF35C284),
                                    foregroundColor: Colors.white,
                                    padding: const EdgeInsets.symmetric(horizontal: 22, vertical: 14),
                                    shape: const StadiumBorder(),
                                  ),
                                  onPressed: () => _scrollTo(_coursesKey),
                                  child: const Text('Starta gratis introduktion'),
                                ),
                                OutlinedButton(
                                  style: OutlinedButton.styleFrom(
                                    foregroundColor: const Color(0xFF0B1526),
                                    backgroundColor: Colors.white,
                                    side: BorderSide(color: const Color(0xFFE2E8F0).withOpacity(1)),
                                    padding: const EdgeInsets.symmetric(horizontal: 22, vertical: 14),
                                    shape: const StadiumBorder(),
                                  ),
                                  onPressed: () => _scrollTo(_coursesKey),
                                  child: const Text('Utforska utan konto'),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),

                      // Populära kurser
                      _SectionTitle('Populära kurser'),
                      GlassCard(
                        key: _coursesKey,
                        child: Consumer(builder: (context, ref, _) {
                          final async = ref.watch(popularCoursesProvider);
                          return async.when(
                            loading: () => const _GlassGridSkeleton(itemHeight: 220),
                            error: (e, _) => Text('Fel: $e'),
                            data: (items) {
                              if (items.isEmpty) return const Text('Inga kurser ännu.');
                              return LayoutBuilder(
                                builder: (context, c) {
                                  final w = c.maxWidth;
                                  int cols = 1;
                                  if (w >= 1200) cols = 4; else if (w >= 900) cols = 3; else if (w >= 600) cols = 2;
                                  final width = (w - ((cols - 1) * 12)) / cols;
                                  return Wrap(
                                    spacing: 12,
                                    runSpacing: 12,
                                    children: [
                                      for (final m in items)
                                        SizedBox(
                                          width: width,
                                          child: _CourseTile(
                                            title: '${m['title']}',
                                            description: (m['description'] ?? '') as String?,
                                            imageUrl: (m['hero_image_url'] ?? '') as String?,
                                            isIntro: m['is_intro'] == true,
                                            onTap: () => context.push('/course-intro?id=${m['id']}&title=${Uri.encodeComponent(m['title'] ?? '')}'),
                                          ),
                                        ),
                                    ],
                                  );
                                },
                              );
                            },
                          );
                        }),
                      ),

                      // Lärare
                      const SizedBox(height: 24),
                      _SectionTitle('Lärare'),
                      GlassCard(
                        key: _teachersKey,
                        padding: const EdgeInsets.all(12),
                        child: SizedBox(
                          height: 96,
                          child: Consumer(builder: (context, ref, _) {
                            final async = ref.watch(teachersProvider);
                            return async.when(
                              loading: () => ListView.separated(
                                scrollDirection: Axis.horizontal,
                                itemBuilder: (_, __) => const _GlassPillSkeleton(width: 180, height: 72),
                                separatorBuilder: (_, __) => const SizedBox(width: 8),
                                itemCount: 6,
                              ),
                              error: (e, _) => Text('Fel: $e'),
                              data: (items) {
                                if (items.isEmpty) return const Center(child: Text('Inga lärare ännu.'));
                                return ListView.separated(
                                  scrollDirection: Axis.horizontal,
                                  itemCount: items.length,
                                  separatorBuilder: (_, __) => const SizedBox(width: 8),
                                  itemBuilder: (context, i) {
                                    final t = items[i];
                                    return _TeacherPill(
                                      name: '${t['full_name'] ?? 'Lärare'}',
                                      avatarUrl: (t['avatar_url'] ?? '') as String?,
                                    );
                                  },
                                );
                              },
                            );
                          }),
                        ),
                      ),

                      // Tjänster
                      const SizedBox(height: 24),
                      _SectionTitle('Tjänster'),
                      GlassCard(
                        key: _servicesKey,
                        child: Consumer(builder: (context, ref, _) {
                          final async = ref.watch(recentServicesProvider);
                          return async.when(
                            loading: () => const _GlassGridSkeleton(itemHeight: 160),
                            error: (e, _) => Text('Fel: $e'),
                            data: (items) {
                              if (items.isEmpty) return const Text('Inga tjänster ännu.');
                              return LayoutBuilder(
                                builder: (context, c) {
                                  final w = c.maxWidth;
                                  int cols = 1;
                                  if (w >= 1200) cols = 3; else if (w >= 900) cols = 3; else if (w >= 600) cols = 2;
                                  final width = (w - ((cols - 1) * 12)) / cols;
                                  return Wrap(
                                    spacing: 12,
                                    runSpacing: 12,
                                    children: [
                                      for (final s in items)
                                        SizedBox(
                                          width: width,
                                          child: _ServiceTile(
                                            title: '${s['title']}',
                                            description: (s['description'] ?? '') as String?,
                                            area: (s['certified_area'] ?? '') as String?,
                                            priceCents: (s['price_cents'] as int?),
                                          ),
                                        ),
                                    ],
                                  );
                                },
                              );
                            },
                          );
                        }),
                      ),

                      // Så funkar Visdom
                      const SizedBox(height: 24),
                      _SectionTitle('Så funkar Visdom'),
                      const GlassCard(
                        child: _HowItWorks(),
                      ),

                      const SizedBox(height: 40),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    )])]);
  }
}

class _SectionTitle extends StatelessWidget {
  final String text;
  const _SectionTitle(this.text);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.only(left: 4, bottom: 10),
      child: Text(
        text,
        style: Theme.of(context).textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.w600, color: const Color(0xFF0B1526)),
      ),
    );
  }
}

// GlassCard flyttad till ../../core/widgets/glass_card.dart

class _GlassGridSkeleton extends StatelessWidget {
  final double itemHeight;
  const _GlassGridSkeleton({required this.itemHeight});

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, c) {
        final w = c.maxWidth;
        int cols = 1;
        if (w >= 1200) cols = 4; else if (w >= 900) cols = 3; else if (w >= 600) cols = 2;
        final width = (w - ((cols - 1) * 12)) / cols;
        return Wrap(
          spacing: 12,
          runSpacing: 12,
          children: List.generate(cols * 2, (_) => _GlassBlock(width: width, height: itemHeight)),
        );
      },
    );
  }
}

class _GlassBlock extends StatelessWidget {
  final double width;
  final double height;
  const _GlassBlock({required this.width, required this.height});

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(16),
      child: Container(
        width: width,
        height: height,
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.4),
          border: Border.all(color: const Color(0xFFE2E8F0).withOpacity(0.5)),
          borderRadius: BorderRadius.circular(16),
        ),
      ),
    );
  }
}

class _GlassPillSkeleton extends StatelessWidget {
  final double width;
  final double height;
  const _GlassPillSkeleton({required this.width, required this.height});

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(20),
      child: Container(
        width: width,
        height: height,
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.4),
          border: Border.all(color: const Color(0xFFE2E8F0).withOpacity(0.5)),
          borderRadius: BorderRadius.circular(20),
        ),
      ),
    );
  }
}

class _CourseTile extends StatelessWidget {
  final String title;
  final String? description;
  final String? imageUrl;
  final bool isIntro;
  final VoidCallback? onTap;
  const _CourseTile({required this.title, this.description, this.imageUrl, required this.isIntro, this.onTap});

  @override
  Widget build(BuildContext context) {
    return InkWell(
      borderRadius: BorderRadius.circular(16),
      onTap: onTap,
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
          border: Border.all(color: const Color(0xFFE2E8F0)),
          boxShadow: [
            BoxShadow(color: Colors.black.withOpacity(0.06), blurRadius: 12, offset: const Offset(0, 4)),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            AspectRatio(
              aspectRatio: 16 / 9,
              child: (imageUrl != null && imageUrl!.isNotEmpty)
                  ? Image.network(imageUrl!, fit: BoxFit.cover)
                  : Image.asset('assets/images/bakgrund.png', fit: BoxFit.cover),
            ),
            Padding(
              padding: const EdgeInsets.all(14),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w700, color: const Color(0xFF0B1526)),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      if (isIntro) const SizedBox(width: 8),
                      if (isIntro) const Chip(label: Text('Gratis intro'), visualDensity: VisualDensity.compact),
                    ],
                  ),
                  if ((description ?? '').isNotEmpty) ...[
                    const SizedBox(height: 6),
                    Text(description!, maxLines: 2, overflow: TextOverflow.ellipsis, style: const TextStyle(color: Colors.black87)),
                  ],
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _TeacherPill extends StatelessWidget {
  final String name;
  final String? avatarUrl;
  const _TeacherPill({required this.name, this.avatarUrl});

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(20),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.55),
            border: Border.all(color: const Color(0xFFE2E8F0).withOpacity(0.5)),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              CircleAvatar(
                radius: 22,
                backgroundImage: (avatarUrl != null && avatarUrl!.isNotEmpty) ? NetworkImage(avatarUrl!) : null,
                child: (avatarUrl == null || avatarUrl!.isEmpty) ? const Icon(Icons.person_outline) : null,
              ),
              const SizedBox(width: 10),
              Text(name, style: const TextStyle(fontWeight: FontWeight.w600)),
            ],
          ),
        ),
      ),
    );
  }
}

class _ServiceTile extends StatelessWidget {
  final String title;
  final String? description;
  final String? area;
  final int? priceCents;
  const _ServiceTile({required this.title, this.description, this.area, this.priceCents});

  @override
  Widget build(BuildContext context) {
    final priceText = priceCents == null ? '' : '${(priceCents! / 100).toStringAsFixed(0)} kr';
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: const Color(0xFFE2E8F0)),
        boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.06), blurRadius: 10, offset: const Offset(0, 4))],
      ),
      padding: const EdgeInsets.all(14),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(title, style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w700, color: const Color(0xFF0B1526))),
          if ((description ?? '').isNotEmpty) ...[
            const SizedBox(height: 6),
            Text(description!, maxLines: 2, overflow: TextOverflow.ellipsis),
          ],
          const SizedBox(height: 10),
          Row(
            children: [
              if ((area ?? '').isNotEmpty) Chip(label: Text(area!), visualDensity: VisualDensity.compact),
              const Spacer(),
              if (priceText.isNotEmpty) Text(priceText, style: const TextStyle(fontWeight: FontWeight.w700)),
            ],
          )
        ],
      ),
    );
  }
}

class _HowItWorks extends StatelessWidget {
  const _HowItWorks();
  @override
  Widget build(BuildContext context) {
    return Wrap(
      spacing: 12,
      runSpacing: 12,
      children: const [
        _HiwCard(icon: Icons.menu_book, title: 'Gå kurser', desc: 'Starta med gratis introduktioner och fördjupa dig.'),
        _HiwCard(icon: Icons.storefront, title: 'Köp/Sälj tjänster', desc: 'Erbjud och boka tjänster i certifierade områden.'),
        _HiwCard(icon: Icons.account_circle, title: 'Skapa profil', desc: 'Bygg din närvaro och visa dina intyg.'),
        _HiwCard(icon: Icons.school, title: 'Kontakta lärare', desc: 'Hitta lärare och få handledning.'),
      ],
    );
  }
}

class _HiwCard extends StatelessWidget {
  final IconData icon;
  final String title;
  final String desc;
  const _HiwCard({required this.icon, required this.title, required this.desc});

  @override
  Widget build(BuildContext context) {
    return GlassCard(
      padding: const EdgeInsets.all(16),
      child: SizedBox(
        width: 280,
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Icon(icon, size: 28),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(title, style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w700)),
                  const SizedBox(height: 6),
                  Text(desc),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
